name: 天气鸭 CI/CD 工作流

# 触发条件：推送到非main分支时执行CI
on:
  push:
    branches-ignore:
      - main
  pull_request:
    branches:
      - main
      - develop

# 环境变量
env:
  NODE_VERSION: '18.x'
  CACHE_DEPENDENCY_PATH: package-lock.json

jobs:
  # 代码质量检查
  lint-and-format:
    name: 代码质量检查
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}
          
      - name: 安装依赖
        run: npm ci
        
      - name: ESLint 代码检查
        run: npm run lint
        
      - name: Prettier 格式检查
        run: npm run format:check
        
      - name: TypeScript 类型检查
        run: npm run type-check

  # 单元测试
  test:
    name: 单元测试
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    strategy:
      matrix:
        node-version: ['18.x', '20.x']
        
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 设置 Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}
          
      - name: 安装依赖
        run: npm ci
        
      - name: 运行单元测试
        run: npm test -- --coverage --watchAll=false
        
      - name: 上传测试覆盖率报告
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '18.x'
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # 构建测试 (多平台)
  build:
    name: 构建测试
    runs-on: ${{ matrix.os }}
    needs: test
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}
          
      - name: 安装依赖
        run: npm ci
        
      - name: 构建应用
        run: npm run build
        
      - name: 构建 Electron 应用 (仅 Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: npm run electron:build
        
      - name: 上传构建产物
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist/
            out/
          retention-days: 7

  # 端到端测试
  e2e-test:
    name: 端到端测试
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}
          
      - name: 安装依赖
        run: npm ci
        
      - name: 安装 Playwright 浏览器
        run: npx playwright install --with-deps
        
      - name: 运行端到端测试
        run: npm run test:e2e
        
      - name: 上传测试报告
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  # 安全扫描
  security-scan:
    name: 安全扫描
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}
          
      - name: 安装依赖
        run: npm ci
        
      - name: 运行 npm audit
        run: npm audit --audit-level=moderate
        
      - name: 运行 Snyk 安全扫描
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # 性能测试
  performance-test:
    name: 性能测试
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}
          
      - name: 安装依赖
        run: npm ci
        
      - name: 构建应用
        run: npm run build
        
      - name: 运行性能测试
        run: npm run test:performance
        
      - name: 分析 Bundle 大小
        run: npm run analyze:bundle

  # 通知状态
  notify:
    name: 通知测试结果
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, build, e2e-test, security-scan, performance-test]
    if: always()
    
    steps:
      - name: 检查工作流状态
        run: |
          if [[ "${{ needs.lint-and-format.result }}" == "success" && 
                "${{ needs.test.result }}" == "success" && 
                "${{ needs.build.result }}" == "success" && 
                "${{ needs.e2e-test.result }}" == "success" ]]; then
            echo "✅ 所有测试通过！代码质量良好，可以合并到主分支。"
          else
            echo "❌ 部分测试失败，请检查错误并修复后重新提交。"
            exit 1
          fi